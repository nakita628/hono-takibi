openapi: "3.0.3"
info:
  title: Complex REST API
  version: "1.0.0"
  description: >
    This is a sample REST API demonstrating complex schema definitions including nested objects,
    polymorphism using oneOf with discriminators, and advanced object structures.
servers:
  - url: "https://api.example.com/v1"
paths:
  /users:
    get:
      summary: "List all users"
      responses:
        '200':
          description: "A list of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: "Create a new user"
      requestBody:
        description: "User to add"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        '201':
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      summary: "Retrieve a user by ID"
      responses:
        '200':
          description: "User details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: "User not found"
    put:
      summary: "Update an existing user"
      requestBody:
        description: "Updated user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        '200':
          description: "User updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: "User not found"
    delete:
      summary: "Delete a user"
      responses:
        '204':
          description: "User deleted successfully"
        '404':
          description: "User not found"
  /orders:
    get:
      summary: "List all orders"
      responses:
        '200':
          description: "A list of orders"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      summary: "Create a new order"
      requestBody:
        description: "Order to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrder"
      responses:
        '201':
          description: "Order created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        address:
          $ref: "#/components/schemas/Address"
        profile:
          $ref: "#/components/schemas/UserProfile"
      required:
        - id
        - name
        - email
    NewUser:
      type: object
      properties:
        name:
          type: string
          example: "Jane Doe"
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
        address:
          $ref: "#/components/schemas/Address"
        profile:
          $ref: "#/components/schemas/UserProfile"
      required:
        - name
        - email
    UpdateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        address:
          $ref: "#/components/schemas/Address"
        profile:
          $ref: "#/components/schemas/UserProfile"
    Address:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Anytown"
        state:
          type: string
          example: "CA"
        postalCode:
          type: string
          example: "12345"
        country:
          type: string
          example: "USA"
      required:
        - street
        - city
        - state
        - postalCode
        - country
    UserProfile:
      type: object
      properties:
        bio:
          type: string
          example: "Software engineer with 10 years of experience."
        social:
          type: object
          properties:
            twitter:
              type: string
              example: "@johndoe"
            linkedin:
              type: string
              example: "john-doe"
          additionalProperties: false
      additionalProperties: false
    Order:
      type: object
      properties:
        orderId:
          type: string
          example: "ORD-001"
        user:
          $ref: "#/components/schemas/User"
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        total:
          type: number
          format: float
          example: 199.99
        status:
          type: string
          enum:
            - pending
            - confirmed
            - shipped
            - delivered
            - cancelled
          example: "pending"
        paymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
      required:
        - orderId
        - user
        - items
        - total
        - status
    NewOrder:
      type: object
      properties:
        userId:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        paymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
      required:
        - userId
        - items
    OrderItem:
      type: object
      properties:
        productId:
          type: string
          example: "PROD-001"
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 49.99
      required:
        - productId
        - quantity
        - price
    PaymentMethod:
      description: "A polymorphic payment method"
      oneOf:
        - $ref: "#/components/schemas/CreditCardPayment"
        - $ref: "#/components/schemas/PaypalPayment"
      discriminator:
        propertyName: method
    CreditCardPayment:
      type: object
      properties:
        method:
          type: string
          enum: [credit_card]
          default: credit_card
        cardNumber:
          type: string
          example: "4111111111111111"
        cardHolder:
          type: string
          example: "John Doe"
        expirationDate:
          type: string
          pattern: "^\\d{2}/\\d{2}$"
          example: "12/25"
      required:
        - method
        - cardNumber
        - cardHolder
        - expirationDate
    PaypalPayment:
      type: object
      properties:
        method:
          type: string
          enum: [paypal]
          default: paypal
        email:
          type: string
          format: email
          example: "user@paypal.com"
      required:
        - method
        - email
    ComplexType:
      type: object
      properties:
        id:
          type: string
          example: "ct-001"
        attributes:
          type: object
          properties:
            type:
              type: string
              example: "example"
            details:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    example: "color"
                  value:
                    type: string
                    example: "red"
                required:
                  - key
                  - value
          required:
            - type
            - details
      required:
        - id
        - attributes
